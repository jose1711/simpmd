#!/usr/bin/python

# PTP2RAW
#
# Copyright 2010 Petr Tuma
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import struct

if len (sys.argv) != 2:
    print "Creates separate raw tape files from single ptp tape file"
    print "Usage: %s <filename>" % sys.argv [0]
    sys.exit (1)

oInputFile = open (sys.argv [1], "r")
sInputData = oInputFile.read ()
oInputFile.close ()

sOutputName = "unnamed"
iPosition = 0

while iPosition < len (sInputData):

    # Read the length of the next block and the next block itself
    iBlockLength = struct.unpack ("<H", sInputData [iPosition:iPosition + 2]) [0]
    sBlockData = sInputData [iPosition + 2:iPosition + iBlockLength + 2]
    iPosition += iBlockLength + 2

    # Handle standard tape headers by changing output file name
    if iBlockLength == 0x3F:

        sHeaderFF, sHeader00, sHeader55, \
        iHeaderNumber, sHeaderType, \
        iHeaderStart, iHeaderLen, \
        sHeaderName, iHeaderSum = \
            struct.unpack ("16s16s16sBcHH8sB", sBlockData)

        # Yeah well, the sum is not checked
        if sHeaderFF == "\xFF"*16 and \
           sHeader00 == "\x00"*16 and \
           sHeader55 == "\x55"*16:

            print "%02d/%c %04X-%04X %s" % (iHeaderNumber, sHeaderType, \
                                            iHeaderStart, iHeaderLen, \
                                            sHeaderName)
            sOutputName = sHeaderName.strip ()

    # Write the block to the current output file
    oOutputFile = open (sOutputName, "a+")
    oOutputFile.write (sBlockData)
    oOutputFile.close ()

# That's all folks :-)
